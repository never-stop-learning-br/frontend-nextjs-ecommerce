import type { ConfigType } from "@stitches/react/types/config";

export const utils: ConfigType.Utils = {
  m: (value: string) => ({ margin: value }),
  mt: (value: string) => ({ marginTop: value }),
  mr: (value: string) => ({ marginRight: value }),
  mb: (value: string) => ({ marginBottom: value }),
  ml: (value: string) => ({ marginLeft: value }),
  mx: (value: string) => ({ marginLeft: value, marginRight: value }),
  my: (value: string) => ({ marginTop: value, marginBottom: value }),

  p: (value: string) => ({ padding: value }),
  pt: (value: string) => ({ paddingTop: value }),
  pr: (value: string) => ({ paddingRight: value }),
  pb: (value: string) => ({ paddingBottom: value }),
  pl: (value: string) => ({ paddingLeft: value }),
  px: (value: string) => ({ paddingLeft: value, paddingRight: value }),
  py: (value: string) => ({ paddingTop: value, paddingBottom: value }),

  h: (value: string) => ({ height: value }),
  minH: (value: string) => ({ minHeight: value }),
  maxH: (value: string) => ({ maxHeight: value }),
  w: (value: string) => ({ width: value }),
  minW: (value: string) => ({ minWidth: value }),
  maxW: (value: string) => ({ maxWidth: value }),

  d: (value: string) => ({ display: value }),
  fd: (value: string) => ({ flexDirection: value }),
  fw: (value: string) => ({ flexWrap: value }),
  fg: (value: string) => ({ flexGrow: value }),
  fs: (value: string) => ({ flexShrink: value }),
  fb: (value: string) => ({ flexBasis: value }),
  jc: (value: string) => ({ justifyContent: value }),
  ai: (value: string) => ({ alignItems: value }),

  t: (value: string) => ({ top: value }),
  r: (value: string) => ({ right: value }),
  b: (value: string) => ({ bottom: value }),
  l: (value: string) => ({ left: value }),

  z: (value: string) => ({ zIndex: value }),

  ov: (value: string) => ({ overflow: value }),
  ox: (value: string) => ({ overflowX: value }),
  oy: (value: string) => ({ overflowY: value }),

  grid: (value: string) => ({ display: "grid", grid: value }),
  cols: (value: string) => ({ gridTemplateColumns: value }),
  rows: (value: string) => ({ gridTemplateRows: value }),
  areas: (value: string) => ({ gridTemplateAreas: value }),
  gap: (value: string) => ({ gap: value }),
  colGap: (value: string) => ({ columnGap: value }),
  rowGap: (value: string) => ({ rowGap: value }),
  flow: (value: string) => ({ gridAutoFlow: value }),
  col: (value: string) => ({ gridColumn: value }),
  row: (value: string) => ({ gridRow: value }),
  area: (value: string) => ({ gridArea: value }),
  autoCols: (value: string) => ({ gridAutoColumns: value }),
  autoRows: (value: string) => ({ gridAutoRows: value }),

  bg: (value: string) => ({ backgroundColor: value }),
  bgi: (value: string) => ({ backgroundImage: value }),
  bgr: (value: string) => ({ backgroundRepeat: value }),
  bgs: (value: string) => ({ backgroundSize: value }),
  bgp: (value: string) => ({ backgroundPosition: value }),
  bga: (value: string) => ({ backgroundAttachment: value }),
  bgo: (value: string) => ({ backgroundOrigin: value }),
  bgc: (value: string) => ({ backgroundClip: value }),

  br: (value: string) => ({ borderRadius: value }),
  btrr: (value: string) => ({ borderTopRightRadius: value }),
  bbrr: (value: string) => ({ borderBottomRightRadius: value }),
  bblr: (value: string) => ({ borderBottomLeftRadius: value }),
  btlr: (value: string) => ({ borderTopLeftRadius: value }),

  bxsh: (value: string) => ({ boxShadow: value }),
  bxshs: (value: string) => ({ boxShadowSpread: value }),
  bxsha: (value: string) => ({ boxShadowBlur: value }),
  bxshx: (value: string) => ({ boxShadowX: value }),
  bxshy: (value: string) => ({ boxShadowY: value }),
  bxshi: (value: string) => ({ boxShadowInset: value }),
  bxshc: (value: string) => ({ boxShadowColor: value }),
  bxshsp: (value: string) => ({ boxShadowSpread: value }),
  bxshbl: (value: string) => ({ boxShadowBlur: value }),
};
